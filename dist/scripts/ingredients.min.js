(function(){
  'use strict';
  angular.module('text.component', [])
    .directive('iText', iText);

  iText.$inject=[];
  function iText() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/text/text.template.html',
      scope:{
        model: '=?',
        size: '@?',
        label: '@?',
        inline: '@?'
      }
    };
  }

})();

/**
 * Created by bionaut on 25/06/15.
 */

(function () {
  'use strict';
  angular.module('iSwitch.component', [])
    .directive('iSwitch', iSwitch);

  function iSwitch() {
    return {
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/switch/iSwitch.template.html',
      replace: true,
      scope: {
        options: '=?',
        size: '@?',
        viewAs: '@?',
        returnAs: '@?',
        model: '=?',
        default: '@?'
      },
      controller: iSwitchController,
      controllerAs: 'vm',
      bindToController: true
    };
  }

  function iSwitchController() {
    var vm = this;

    // methods
    vm.handleClick = handleClick;
    vm.getDataLength = getDataLength;
    vm.isActive = isActive;

    if (vm.default) {
      handleClick(vm.options[vm.default], vm.default);
    }

    /////////////////////////////////////////////////////////

    function handleClick(option, index) {
      vm.model = resolveFn(option, index)
    }

    function getDataLength() {
      if (angular.isArray(vm.options)) {
        return vm.options.length;
      } else if (angular.isObject(vm.options)) {
        return Object.keys(vm.options).length;
      }
    }

    function resolveFn(option, index) {
      if (vm.returnAs) {
        return option[vm.returnAs];
      }
      return index;
    }

    function isActive(option, index) {
      return vm.model == resolveFn(option, index);
    }

  }

})();

/**
 * Created by bionaut on 14/06/15.
 */


// TODO: show/hide arrow
// TODO: show/hide label
// TODO: inline label


(function () {
  'use strict';
  angular.module('select.component', [])
    .directive('iSelect', iSelect);

  function iSelect() {
    var directive = {
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/select/select.template.html',
      scope: {
        data: '=',
        returnAs: '@',
        viewAs: '@',
        searchable: '@?',
        placeholder: '@?',
        size: '@?',
        template: '@?',
        default: '@?',
        label: '@?',
        inline: '@?',
        model: '=',
        change: '=?',
        tooltip: '@?',
        readOnly: '=?'
      },
      controller: iSelectController,
      controllerAs: 'iSelect',
      link: linkFn
    };


    function linkFn(s,e,a) {
      e.on('click', function (ev) {
        ev.stopPropagation();
      })
    }

    iSelectController.$inject = ['$scope', '$timeout', '$element'];
    function iSelectController($scope, $timeout, $element) {

      var iSelect = this;
      var s = $scope;

      // methods
      iSelect.select = handleSelect;
      iSelect.toggleList = toggleList;
      iSelect.retrieveProperty = retrieveProperty;
      iSelect.reset = reset;
      iSelect.openList = openList;

      // convert source data
      dataTypeConverse();

      // set default value
      $timeout(function () {
        setDefault();
      });

      // watch data property for changes
      s.$watch('data', handleRefresh);

      // watch model
      s.$watch('model', handleModelChange);

      s.$on('closeContextual', function () {
        iSelect.listToggle = false;
        s.$apply();
      });

      function handleRefresh(nVal, oVal) {
        if (nVal === oVal) return;
        dataTypeConverse();
        setDefault();
      }

      function setDefault() {
        if (s.default) {
          if (s.data && s.isArray) {
            handleSelect(s.default);
          }
          if (s.data && s.isObject) {
            handleSelect(s.default);
          }

        }
      }

      function openList() {
        generateList();
        iSelect.listToggle = true;
      }

      function generateList() {
        var width = $element[0].children[0].clientWidth;
        var height = $element[0].children[0].clientHeight;
        var list = $element[0].getElementsByClassName('i-select-list');
        list[0].style.minWidth = width + 'px';
        list[0].style.top = height + 'px';
        list[0].style.minHeight = height / 2 + 'px';
      }

      function toggleList() {
        generateList();
        iSelect.listToggle = !iSelect.listToggle;
      }

      function handleSelect(index) {
        iSelect.selected = s.data[index];
        s.model = (s.returnAs === '$index') ? index : iSelect.selected[s.returnAs];
        iSelect.searchQuery = (s.searchable) ? retrieveProperty(iSelect.selected, s.viewAs) : '';
        iSelect.listToggle = false;
      }

      function handleModelChange(nVal, oVal) {
        angular.forEach(s.data, function (value, index) {
          if (value[s.returnAs] == nVal) {
            if (typeof s.change !== 'undefined' && (nVal !== oVal) && (typeof oVal !== 'undefined')) {
              s.change(nVal);
            }
            handleSelect(index);
          }
        });
      }


      function retrieveProperty(obj, path) {
        if (!obj) return void 0;
        return objectPath.get(obj, path);
      }

      function dataTypeConverse() {
        if (!s.data) return;
        if (s.data.constructor === Array) {
          s.isArray = true;
          s.isObject = false;
        } else if (typeof s.data === 'object' && (s.data instanceof Array === false)) {
          s.isObject = true;
          s.isArray = false;
        }

      }

      function reset() {
        iSelect.selected = null;
        s.model = null;
        iSelect.searchQuery = null;
        iSelect.listToggle = false;
      }

    }

    return directive;

  }

})();

(function(){
  'use strict';
  angular.module('row.component', [])
    .directive('iRow', iRow);

  iRow.$inject = [];
  function iRow() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/row/row.template.html',
      transclude: true,
      replace: true,
      scope:{
        rowLabel: '@?label',
        classes: '@?',
        optional: '@?',
        required: '@?'
      },
      controller: iRowController,
      controllerAs: 'iRow'
    };
  }

  iRowController.$inject = [];
  function iRowController() {
    var iRow = this;
  }

})();

(function(){
  'use strict';
  angular.module('field.component', [])
    .directive('iField', iField);

  iField.$inject=['$compile'];
  function iField($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };


    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var size = ' style="width:'+ a.size+'%"';

            var debounce = (a.debounce) ? ' ng-model-options="{debounce: '+ a.debounce +'}"': '';
            var fieldClasses = ' class="i-field ' + (a.classes || '') + ' " ng-class="{error: checkErrors()}"';
            var inputClasses = ' class="i-field-input' +( (a.inline) ? ' inline' : '') +( (a.label) ? '' : ' nolabel') + '"';
            var labelClasses = ' class="i-field-label' +( (a.inline) ? ' inline' : '') +( (a.required) ? ' required' : '') + '"';
            var ui_mask = (a.mask) ? ' ui-mask="' + a.mask + '"':'';
            var inputName = (a.name) ? ' name="' + a.name + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var labelAttr = (a.label) ? ' label="' + a.label + '"' : '';
            var kind = (a.type) ? ' type="' + a.type + '"' : 'type="text"';
            var id = (a.id) ? ' id="'+ a.id || a.name +'"' : '';
            var placeholder = (a.placeholder) ? ' placeholder="'+ a.placeholder +'"' : '';
            var regex = (a.regex) ? ' pattern="'+ a.regex +'"' : '';
            var focus = (a.focus) ? ' autofocus' : '';
            var tooltip = (a.tooltip) ? ' <rb-helper tooltip="'+ a.tooltip +'"></rb-helper>' : '';

            var required = (a.required) ? ' required="true"' : '';

            var label = (a.label) ? '<label ' + labelClasses + ' for="'+ id +'">'+a.label+'</label>' : '';

            // custom directives
            var iFormat = (a.format) ? ' i-format="'+ a.format+'"' : '';
            var iValid = (a.validate) ? ' i-valid = "'+ a.validate + '"' : '';


            var html =
              '<div' + size + fieldClasses + '>' +
                label + tooltip +
                '<input ng-hide="' + a.readOnly + '" ' +
                  inputClasses +
                  id +
                  kind +
                  model +
                  labelAttr +
                  debounce +
                  inputName+
                  ui_mask +
                  disabled +
                  placeholder +
                  regex +
                  iFormat +
                  iValid +
                  required +
                  focus +
                '/>' +
                '<div class="read-only" ng-show="'+ a.readOnly+'" ng-bind="'+ a.model +'"></div>' +
                '<div class="fieldErrorMessages" ng-if="!form.$globalErrors" ng-show="form.$submitted">' +
                    '<div class="fieldErrorMessage" ng-repeat="(key,error) in errors track by $index">{{ overrideMessage || getErrorMessage(key) }}</div>'+
                '</div>'+
              '</div>' ;

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){
  'use strict';
  angular
    .module('error.component', [])
    .directive('iError', iError);

  iError.$inject = ['iValid'];
  function iError(iValid) {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/error/error.template.html',
      require: '?^form',
      controller: iErrorController,
      controllerAs: 'error',
      bindToController: true,
      link: function(scope, element, attrs, form) {
        //FIXME: this is horrible

        scope.title = (attrs.title) ? attrs.title : '';

        form.$globalErrors = true;

        function show(submitted, errors) {
          scope.show = submitted && errors && errors.length > 0;
        }

        scope.$watch('form.$submitted', function(submitted) {
          show(submitted, scope.errors);
        });

        scope.$watch('form.$error', function (err) {
          if (!err) {
            return;
          }
          var errorObjects = Object.keys(err).reduce(function(previous, key) {
            var errors = err[key]
              .map(function(arr) {
                var message = iValid.validators[key] ? iValid.validators[key].message : key;
                return {
                  name: arr.$label || arr.$name,
                  error: message
                }
              });
            return previous.concat(errors);
          }, []);

          var messages = errorObjects.map(function(errorObject) {
            return errorObject.error + ': ' + errorObject.name;
          });
          scope.errors = messages;

          show(form.$submitted, messages);
        }, true);
      }
    };
  }

  iErrorController.$inject = ['$scope', 'iValid'];
  function iErrorController($scope, iValid) {
    var error = this;
  }

})();

(function(){
  'use strict';
  angular.module('radio.component', [])
    .directive('iRadio', iRadio);

  iRadio.$inject=['$compile'];
  function iRadio($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };


    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var fieldClasses = ' class="i-radio" ng-class="{error: checkErrors()}"';
            var inputName = (a.name) ? ' name="' + a.name + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var id = (a.id) ? ' id="'+ a.id || a.name +'"' : '';

            var label = (a.label) ? '<label class="radiolabel" for="'+ id +'">'+a.label+'</label>' : '';

            var html =
              '<div' + fieldClasses + '>' +
                label +
                '<input' +
                  id +
                  ' type="radio"' +
                  model +
                  inputName +
                  disabled +
                '/>' +
              '</div>';

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){
  'use strict';
  angular.module('checkbox.component', [])
    .directive('iCheckbox', iCheckbox);

  iCheckbox.$inject=['$compile'];
  function iCheckbox($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };


    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var inputName = (a.name) ? ' name="' + (a.name || a.id) + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var id = (a.id) ? ' id="'+ a.id +'"' : ' id="' +  a.name + '"';

            var label = '<label class="checkboxlabel" for="'+ (a.id || a.name) +'">' + (a.label || '') + '</label>';

            var html =
              '<div' + '>' +
                label +
                '<input' +
                  id +
                  ' type="checkbox"' +
                  model +
                  inputName +
                  disabled +
                '/>' +
              '</div>';

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){
  'use strict';
  angular.module('button.component', [])
    .directive('iButton', iButton);

  iButton.$inject = [];
  function iButton() {
    return {
      priority: 1,
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/button/button.template.html',
      replace: true,
      require: '?^^form',
      scope:{
        title:'@?',
        type: '@?',
        name: '@?',
        iDisabled: '=?'
      },
      controller: iButtonController,
      controllerAs: 'iButton',
      link: {
        pre: function(scope, element, attrs, form) {
          element.on('click', function(event) {
            if (scope.iDisabled) {
              event.preventDefault();
              event.stopImmediatePropagation();
              if (form) {
                form.$setSubmitted(true);
                scope.$evalAsync();
              }
            }
          });
        }
      }
    };
  }

  iButtonController.$inject = [];
  function iButtonController() {
    var iButton = this;
  }

})();

(function(){
  'use strict';
  angular
    .module('alert.component', [])
    .directive('iAlert', iAlert);

  iAlert.$inject = [];
  function iAlert() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/alert/alert.template.html',
      transclude: true,
      scope:{
        type: '@',
        title: '@?',
        messages: '=',
        closeable: '@?'
      },
      controller: iAlertController,
      controllerAs: 'alert',
      bindToController: true
    };
  }

  iAlertController.$inject = ['$scope', 'iValid'];
  function iAlertController($scope, iValid) {
    var alert = this;
  }

})();

/**
 * Created by bionaut on 14/06/15.
 */

(function(){
  'use strict';
  angular.module('iValid.module', [])
    .provider('iValid', iValid);

  iValid.$inject = [];
  function iValid() {

    var validators = {};
    var formatters = {};

    return {
      newValidator: function (name, validator, errorMessage) {
        validators[name] = {
          definition: validator,
          message: errorMessage
        }
      },
      newFormatter: function (name, formatter) {
        formatters[name] = {
          definition: formatter
        }
      },

      $get:[function () {
        return {
          validators: validators,
          formatters: formatters
        }
      }]
    };
  }

})();

/**
 * Created by bionaut on 20/06/15.
 */

(function(){
  'use strict';
  angular.module('iValid.module')
    .config(Config);

  Config.$inject = ['iValidProvider'];
  function Config(iValidProvider) {

    iValidProvider.newValidator('number', number, 'This is not a number');
    iValidProvider.newValidator('email', null, 'This is not an valid email');
    iValidProvider.newValidator('date', null, 'This is not a valid date');
    iValidProvider.newValidator('url', null, 'This is not a valid url');

    iValidProvider.newValidator('pattern', null, 'This field is invalid!');

  }

  function number(value) {

  }

})();

/**
 * Created by bionaut on 14/06/15.
 */

(function(){
  'use strict';
  angular.module('iValid.module')
    .config(Config);

  Config.$inject = ['iValidProvider'];
  function Config(iValidProvider) {

    iValidProvider.newValidator('maxLength', maxLength, 'This is too long!');
    iValidProvider.newValidator('minLength', minLength, 'Too short!');
    //iValidProvider.newValidator('required', required, 'This field is required!');

    function maxLength(value, max) {
      if (!value) {
        return true;
      }
      value = value.toString();
      return value.length <= max;
    }

    function minLength(value, min) {
      if (!value) {
        return true;
      }
      value = value.toString();
      return value.length >= min;
    }

    //function required(value) {
    //  if (!value) return false;
    //  value = value.toString();
    //  return value.length > 0;
    //}

  }
})();

(function(){
  'use strict';
  angular.module('iValid.module')
    .config(Config);

  Config.$inject = ['iValidProvider'];
  function Config(iValidProvider) {

    iValidProvider.newFormatter('maxLength', maxLength);

    function maxLength(value, max) {
      if (value == undefined) {
        return false;
      }

      value = value.toString();

      return (value.length <= max);
    }

  }
})();

/**
 * Created by bionaut on 14/06/15.
 */

(function(){
  'use strict';
  angular
    .module('iForm.components', [
      'field.component',
      'select.component',
      'row.component',
      'checkbox.component',
      'radio.component',
      'text.component',
      'iSwitch.component',
      'button.component',
      'alert.component',
      'error.component'
    ]);
})();

(function(){
  'use strict';
  angular.module('iValid.module')
    .directive('iValid', iValidate)
    .directive('iFormat', iFormat);

  iValidate.$inject = ['iValid', 'iUtils'];
  function iValidate(iValid, iUtils) {
    return{
      restrict: 'A',
      require: '?ngModel',
      link: LinkFn
    };

    function LinkFn(scope, element, attrs, ngModel) {

      if (attrs.iValid.length > 0) {
        attrs.iValid = attrs.iValid.replace(/\s+/g, '');

        var validationObject = iUtils.string2Object(attrs.iValid);

        angular.forEach(validationObject, function (rule, key) {
          ngModel.$validators[key] = function (value) {
            return iValid.validators[key].definition(value, rule);
          };
        });

        ngModel.$label = attrs.label;

        scope.$watch('errors', function () {
          scope.errors = ngModel.$error;
          scope.isDirty = ngModel.$dirty;
        },true);

        // adds error object to scope of the field

        scope.checkErrors  = checkErrors;
        scope.getErrorMessage = getErrorMessage;

      }

      function checkErrors() {
        var obj = scope.errors;
        if (obj == null) return false;
        if (obj.length > 0)    return true;
        if (obj.length === 0)  return false;
        for (var key in obj) {
          if (hasOwnProperty.call(obj, key)) return true;
        }
        return false;
      }

      function getErrorMessage(key) {
        if (typeof iValid.validators[key] === 'undefined' ){ console.info('Unknown validator: ', key); return void 0;}
        return iValid.validators[key].message;
      }

    }
  }

  iFormat.$inject = ['iValid', 'iUtils'];
  function iFormat(iValid, iUtils) {
    return{
      restrict: 'A',
      require: '?ngModel',
      link: LinkFn
    };

    function LinkFn(scope, element, attrs, ngModel) {

      if (attrs.iFormat.length > 0) {
        attrs.iFormat = attrs.iFormat.replace(/\s+/g, '');

        var formatterObject = iUtils.string2Object(attrs.iFormat);

        angular.forEach(formatterObject, function (param, key) {

          var view_value;

          function formatFn(value){
            var return_value;

            if (iValid.formatters[key] === undefined) {return console.info('Unknown formatter: ' + key)}

            // debug
            //console.log('if(iValid.formatters[key].definition(value, param))');
            //console.log(iValid.formatters[key].definition(value, param));
            //console.log(iValid.formatters[key]);

            if(iValid.formatters[key].definition(value, param)){

              // if OK
              return_value = value;
              view_value = return_value;
              ngModel.$setValidity(key, true);
            } else {

              //if NOT ok
              return_value = view_value;
              ngModel.$setViewValue(view_value || '');
              ngModel.$render();
              ngModel.$setValidity(key, true);
            }
            return return_value;
          }

          ngModel.$formatters.push(formatFn);
          ngModel.$parsers.push(formatFn);

        });
      }
    }
  }

})();

(function(){
  'use strict';
  angular.module('iUtils.module', [])
    .run(Run);

  Run.$inject = ['$rootScope'];
  function Run($rootScope) {
    document.addEventListener('click', function (ev) {
      $rootScope.$broadcast('closeContextual', {event: ev});
    });
  }


})();

(function(){
  'use strict';
  angular.module('iUtils.module')
    .service('iUtils', iUtils);

  function iUtils() {
    return{
      string2Object: string2Object,
      deepFind: deepFind,
      objectByString: objectByString
    };
  }

  function string2Object(value) {
    return value.split('|').reduce(function (accumulator, val) {
      var pair = val.trim().split(':');
      accumulator[pair[0]] = pair[1] || null;
      return accumulator;
    }, {});

  }
    // use string to find
    function deepFind(obj, path) {
      var paths = path.split('.');
      var current = obj;
      var i;

      for (i = 0; i < paths.length; ++i) {
        if (current[paths[i]] == undefined) {
          return undefined;
        } else {
          current = current[paths[i]];
        }
      }
      return current;
    }

  function objectByString(o, s) {
    s = s.replace(/\[(\w+)\]/g, '.$1');
    s = s.replace(/^\./, '');
    var a = s.split('.');
    for (var i = 0, n = a.length; i < n; ++i) {
      var k = a[i];
      if (k in o) {
        o = o[k];
      } else {
        return;
      }
    }
    return o;
  }

})();

/**
 * Created by bionaut on 24/06/15.
 */
(function(){
  'use strict';
  angular.module('iStep.module', []);

})();

/**
 * Created by bionaut on 24/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStepTemplate', iStepTemplate);

  iStepTemplate.$inject = [];
  function iStepTemplate() {
    return{
      restrict: 'E',
      link: linkFn
    };
    function linkFn(s,e,a) {
      s.$parent.iStepCtrl.steps.push(a.src);
    }

  }

})();

/**
 * Created by bionaut on 25/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStepNext', iStepNext);

  function iStepNext() {
    return{
      restrict: 'A',

    };
  }
})();

/**
 * Created by bionaut on 24/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStep', iStep);

  iStep.$inject = [];
  function iStep() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iStep/iStep.template.html',
      transclude: true,
      controller: iStepController,
      controllerAs: 'iStepCtrl',
      step: '=?'
    };

  }

  iStepController.$inject = ['$scope'];
  function iStepController($scope) {
    var iStepCtrl = this;

    // variables
    iStepCtrl.steps = [];

    //methods
    iStepCtrl.goTo = goTo;
    iStepCtrl.amIActive = amIActive;


    // one way switch
    $scope.$watch('step', function (n,o) {
      if (o === n) return;
      iStepCtrl.activeStep = $scope.step;
    });

    //activate first step
    $scope.$watch('iStepCtrl.steps', function (n,o) {
      iStepCtrl.activeStep = iStepCtrl.steps[0] || '';
    });


    function goTo(dot) {
      iStepCtrl.activeStep = dot;
    }

    function amIActive(dot) {
      return dot === iStepCtrl.activeStep;
    }
  }
})();

/**
 * Created by bionaut on 08/06/15.
 */

(function(){
  'use strict';
  angular.module('iModal.module', [])
    .factory('iModal', iModal);

  iModal.$inject = ['$document', '$compile', '$rootScope', '$http'];
  function iModal($document, $compile, $rootScope, $http) {
    var buffer = {};
    var body = $document[0].body;

    return{
      open: openModal,
      load: loadModal,
      closeModal: closeModal,
      getBuffer: getBuffer
    };

    function openModal(content) {
      var modalElement = $compile( "<i-modal>"+ content +"</i-modal>" )($rootScope.$new());
      angular.element(body).append(modalElement);
    }

    function closeModal() {
    //  TODO
    }

    function loadModal(url, vm) {
      buffer = vm || {};
      $http.get(url)
        .then(
        function (data) {
          var modalElement = $compile( '<i-modal>'+ data.data+'</i-modal>')($rootScope.$new());
          angular.element(body).append(modalElement);
        },
        function (err) {
        //  error
        }
      );
    }

    function getBuffer() {
      return buffer;
    }
  }

})();

/**
 * Created by bionaut on 08/06/15.
 */

(function(){
  'use strict';
  angular.module('iModal.module')
    .directive('iModal', iModalDirective);

  iModalDirective.$inject = [];
  function iModalDirective() {
    return {
      restrict: 'E',
      templateUrl: 'app/modules/iModal/iModal.template.html',
      transclude: true,
      scope:false,
      controller: iModalController,
      controllerAs: 'vm'
    };
  }

  iModalController.$inject = ['$scope','$element', 'iModal'];
  function iModalController($scope, $element, iModal) {
    $scope.closeModal = closeModal;
    $scope.vm = iModal.getBuffer();

    function closeModal() {
      $scope.$destroy();
      $element.remove();
    }

  }

})();

(function(){
  'use strict';
  angular.module('iForm.module', ['iForm.components'])
    .directive('iForm', iForm);

  iForm.$inject = ['$compile'];
  function iForm($compile) {
    return {
      restrict: 'E',
      scope: true,
      transclude: true,
      link: linkFn,
      controller: 'FormController',
      controllerAs: 'formCtrl'
    };


    function linkFn(s,e,a,c, $transcludeFn) {
      var submit = (a.submit) ? ' ng-submit="'+ a.submit +'"' : '';
      var name = a.name || a.id;
      var classes = ' class="i-form ' + (a.classes || '') + ' "';
      var formElement =
        '<form ' + classes +
          'name="' + name + '"' +
          'id="' + name + '" novalidate' +
               submit +
        '>' +
        '</form>';

      var html = $compile(formElement)(s);
      var form = s[name];
      s.form = form;

      $transcludeFn(s, function (clone) {
        html.append(clone);
        e.replaceWith(html);
      });

      function submitIfValid(event) {
        console.log(event);
        event.preventDefault();
        c.submitted = true;
        if (form.$valid) {
          c.submit();
        }
      }
    }
  }

})();

(function(){
  'use strict';
  angular.module('iForm.module')
    .controller('FormController', FormController);

  FormController.$inject = [];
  function FormController() {
    var formCtrl = this;
  }

})();

/**
 * Created by janci on 12/10/14.
 */

angular.module('iFile.module', [])
  .directive('iFile', iFile);


  function iFile() {
    return {
      restricts: 'AE',
      scope: {
        model: '=?',
        multifile: '@?'
      },
      templateUrl: 'app/modules/iFile/iFile.template.html',
      replace: true,
      link: linkFn
    };

    function linkFn(s, e, a) {
      var Upload, elemento, processFiles;

      elemento = e[0];

      processFiles = function(files) {
        var _tmp, file, i, len, results, upload;
        s.uploadedSuccessfully = false;
        s.uploadError = false;
        if (s.multifile) {
          _tmp = [];
          results = [];
          for (i = 0, len = files.length; i < len; i++) {
            file = files[i];
            results.push(_tmp.push(new Upload(file)));
          }
          return results;
        } else {
          return upload = new Upload(files[0]);
        }
      };

      Upload = (function() {
        function Upload(source) {

          this.file = source;

          if (!this.checkFile(this.file)) return;

          this.reader = new FileReader();
          this.reader.onload = (function(_this) {
            return function() {
              if (s.multifile) {
                s.model = s.model || [];
                s.model.push(_this.reader.model);
                s.$apply();
              } else {
                s.model = _this.reader.model;
                //_this.upload(_this.reader.model);
                s.$apply();
              }
            };
          })(this);
          this.reader.readAsDataURL(this.file);
        }

        //Upload.prototype.uploadedSuccessfully = function() {
        //  s.uploadedSuccessfully = true;
        //  return s.uploadError = false;
        //};
        //
        //Upload.prototype.uploadError = function() {
        //  s.uploadedSuccessfully = false;
        //  return s.uploadError = true;
        //};

        Upload.prototype.checkFile = function(file) {
          if (file.type.match(/^image\W/) !== null) {
            return true;
          } else {
            alert('Only images are allowed!');
            return false;
          }
        };

        return Upload;

      })();


      // ** event catchers **
      elemento.addEventListener('change', (function(_this) {
        return function(ev) {
          var files;
          files = ev.target.files;
          return processFiles(files);
        };
      })(this));
      elemento.addEventListener('dragover', function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return ev.dataTransfer.dropEffect = 'copy';
      });
      elemento.addEventListener('drop', (function(_this) {
        return function(ev) {
          var files;
          ev.stopPropagation();
          ev.preventDefault();
          files = ev.target.files || ev.dataTransfer.files;
          return processFiles(files);
        };
      })(this));
    }

  }

(function(){
  'use strict';

  angular.module('angular-ingredients.js',
    [
      // vendor
      'ngSanitize',
      'ui.router',
      'ngAnimate',
      'ui.mask',

      // core
      'ingredients.modules'
    ])

})();



(function(){
  'use strict';
  angular.module('angular-ingredients.js')
    .controller('stepSample', stepSample);

  function stepSample() {
    var ctrl = this;

    ctrl.sampleData = 'Step controller sample...';
  }
})();

(function () {
  'use strict';
  angular.module('angular-ingredients.js')
    .controller('sampleCtrl', sampleCtrl);

  sampleCtrl.$inject = ['$timeout'];
  function sampleCtrl($timeout) {
    var ctrl = this;

    ctrl.handleSubmit = function (form) {
      alert('submitted');
    };

    ctrl.cardTypes = [{label: 'Stávající kartě', value: false}, {label: 'Obnovené kartě', value: true}];


    ctrl.sampleData = [
      {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 1
      },
      {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 2
      }
    ];


    ctrl.sampleData3 = {
      1: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 1
      },
      2: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 2
      },
      3: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 3
      }
    };

    ctrl.sampleData4 = [
      {
        label: 'Some label 1',
        value: 1
      },
      {
        label: 'Some label 2',
        value: 2
      }
    ];

    ctrl.sampleCarsData = [
      {
        label: 'Škoda Auto - simple clever',
        value: 'skoda'
      },
      {
        label: 'BMW - as fast as you',
        value: 'bmw'
      }
    ];

    ctrl.sampleData2 = ['Item 1', 'Item 2'];


    $timeout(function () {

      //ctrl.m1 = 1;
      ctrl.m2 = 1;
      //ctrl.m3 = 1;


    }, 5000)

  }
})();

(function(){
  'use strict';
  angular.module('ingredients.modules',
    ['iForm.module', 'iValid.module', 'iModal.module', 'iFile.module', 'iUtils.module', 'iStep.module']);
})();

angular.module("angular-ingredients.js").run(["$templateCache", function($templateCache) {$templateCache.put("app/samples/select.sample.html","<h3>{{item.text}}</h3><small>{{item.value}}</small>");
$templateCache.put("app/samples/step1.sample.html","<h1>Some step #1</h1><small>some some text</small><p>{{::ctrl.sampleData}}</p><button i-step-next=\"\">Continue</button>");
$templateCache.put("app/samples/step2.sample.html","<h1>Some step #2</h1><small>some some text</small>");
$templateCache.put("app/modules/iFile/iFile.template.html","<div class=\"i-file-upload clearfix\"><div class=\"preview\" ng-if=\"!multifile && result\"><img ng-src=\"{{result}}\"></div><div class=\"previewWrapper\" ng-if=\"multifile !== undefined\"><div class=\"preview\" ng-click=\"removeFile($index)\" ng-repeat=\"preview in result track by $index\"><img ng-src=\"{{preview}}\"></div></div><label class=\"fileInput fc-plus-circle\"><input class=\"hidden\" type=\"file\">Drop and drop<div class=\"uploadMessage message\" ng-show=\"uploadedSuccessfully\">Uploaded OK</div><div class=\"uploadError message\" ng-show=\"uploadError\">Upload Failed</div></label><div class=\"filesCount\" ng-if=\"multifile && result\">{{result.length}}</div></div>");
$templateCache.put("app/modules/iModal/imodal.template.html","<div class=\"i-modal\"><div class=\"i-content\"><div ng-click=\"closeModal()\" class=\"i-close\"><i class=\"remove icon big\"></i></div><ng-transclude></ng-transclude></div></div>");
$templateCache.put("app/modules/iStep/iStep.template.html","<div class=\"i-step\" style=\"width:{{ (size || 100) }}%\"><ng-include src=\"iStepCtrl.activeStep\"></ng-include><ng-transclude></ng-transclude><div class=\"dots\"><div class=\"dot\" ng-repeat=\"dot in iStepCtrl.steps\" ng-click=\"iStepCtrl.goTo(dot)\" ng-class=\"{active: iStepCtrl.amIActive(dot)}\"></div></div></div>");
$templateCache.put("app/modules/iForm/components/button/button.template.html","<button ng-class=\"{fill: fill, small: small, disabled: iDisabled}\" class=\"i-button\" name=\"{{name}}\" type=\"{{type || \'button\'}}\">{{title}}</button>");
$templateCache.put("app/modules/iForm/components/alert/alert.template.html","<div class=\"i-alert i-alert-{{ alert.type }}\"><div ng-if=\"alert.title\" class=\"i-alert-header\">{{alert.title}}</div><div ng-repeat=\"message in alert.messages\">{{message}}</div></div>");
$templateCache.put("app/modules/iForm/components/error/error.template.html","<i-alert ng-if=\"show\" title=\"{{title}}\" type=\"error\" messages=\"errors\"></i-alert>");
$templateCache.put("app/modules/iForm/components/row/row.template.html","<div class=\"i-row {{ classes }}\"><div ng-if=\"rowLabel\" class=\"i-row-label\"><div ng-class=\"{\'required-mark\': required}\" class=\"label\" ng-bind=\"rowLabel\"></div><small ng-if=\"optional\" class=\"optional\">({{optional}})</small></div><div class=\"i-row-content\" ng-class=\"{labeled: rowLabel}\" ng-transclude=\"\"></div></div>");
$templateCache.put("app/modules/iForm/components/select/select.template.html","<div class=\"i-select\" style=\"width:{{size || 100}}%\" ng-if=\"!native\" ng-class=\"{inline: inline, nolabel: !label}\"><label class=\"i-field-label\" ng-if=\"label\" ng-bind=\"label\"></label><rb-helper ng-if=\"tooltip\" tooltip=\"{{tooltip}}\"></rb-helper><div class=\"read-only\" ng-show=\"readOnly\" ng-bind=\"iSelect.retrieveProperty(iSelect.selected, viewAs)\"></div><div ng-hide=\"readOnly\"><div ng-hide=\"searchable\" class=\"current-value\" ng-click=\"iSelect.toggleList()\"><span>{{ iSelect.retrieveProperty(iSelect.selected, viewAs) || placeholder }}</span></div><div ng-show=\"searchable\" class=\"i-select-search\"><input type=\"text\" ng-model=\"iSelect.searchQuery\" ng-change=\"iSelect.openList()\" placeholder=\"{{placeholder}}\"><div class=\"reset-button\" ng-if=\"searchable && iSelect.searchQuery\" ng-click=\"iSelect.reset()\"><i class=\"ion-ios-close-empty\"></i></div></div><div class=\"i-select-toggle\" ng-click=\"iSelect.toggleList()\"><div ng-if=\"!searchable\" class=\"ion-arrow-down-b i-select-toggle-icon\"></div><div ng-if=\"searchable\" class=\"ion-search i-select-toggle-icon\"></div></div><div class=\"i-select-list\" ng-show=\"iSelect.listToggle\" ng-class=\"{nolabel: !label}\"><div class=\"is-array\" ng-if=\"isArray\"><div ng-if=\"template\" ng-include=\"template\" class=\"i-select-item\" data-index=\"{{ item[returnAs] || $index}}\" ng-repeat=\"item in data | filter: iSelect.searchQuery track by $index\" ng-click=\"iSelect.select($index)\"></div><div ng-if=\"!template\" class=\"i-select-item\" data-index=\"{{ item[returnAs] || $index}}\" ng-repeat=\"item in data | filter: iSelect.searchQuery track by $index\" ng-click=\"iSelect.select($index)\" ng-bind=\"iSelect.retrieveProperty(item, viewAs)\"></div></div><div class=\"is-object\" ng-if=\"isObject\"><div ng-if=\"template\"><div ng-include=\"template\" class=\"i-select-item\" data-index=\"{{ item[returnAs] || $index}}\" ng-repeat=\"(key, item) in data\" ng-click=\"iSelect.select(key)\"></div></div><div ng-if=\"!template\"><div class=\"i-select-item\" data-index=\"{{ item[returnAs] || $index}}\" ng-repeat=\"(key, item) in data\" ng-click=\"iSelect.select(key)\">{{ iSelect.retrieveProperty(item, viewAs) }}</div></div></div></div></div></div>");
$templateCache.put("app/modules/iForm/components/switch/iSwitch.template.html","<div class=\"i-switch\" style=\"width:{{ (vm.size || 100) }}%\"><div ng-repeat=\"option in vm.options track by $index\" class=\"i-switch-option\" ng-bind=\"option[vm.viewAs] || option || $index\" ng-click=\"vm.handleClick(option, $index)\" ng-class=\"{active: vm.isActive(option, $index)}\" style=\"width: {{100/vm.getDataLength()}}%\"></div></div>");
$templateCache.put("app/modules/iForm/components/text/text.template.html","<div style=\"width:{{ (size || 100) }}%\" class=\"i-text\"><div ng-if=\"label\" ng-class=\"{inline: inline}\" class=\"i-text-label\" ng-bind=\"label\"></div><div class=\"i-text-output\" ng-bind=\"model\" ng-class=\"{inline: inline, nolabel: !label}\"></div></div>");}]);